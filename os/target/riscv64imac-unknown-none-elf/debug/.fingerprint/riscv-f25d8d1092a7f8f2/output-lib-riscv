{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":301,"byte_end":327,"line_start":10,"line_end":10,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":670,"byte_end":805,"line_start":28,"line_end":32,"column_start":1,"column_end":35,"is_primary":false,"text":[{"text":"instruction!(","highlight_start":1,"highlight_end":14},{"text":"    /// `EBREAK` instruction wrapper","highlight_start":1,"highlight_end":37},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Generates a breakpoint exception.","highlight_start":1,"highlight_end":42},{"text":"    , ebreak, \"ebreak\", __ebreak);","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"instruction!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":27,"byte_end":668,"line_start":3,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! instruction {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])*, $fnname:ident, $asm:expr, $asm_fn:ident) => (","highlight_start":1,"highlight_end":70},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub unsafe fn $fnname() {","highlight_start":1,"highlight_end":34},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn();","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":301,"byte_end":305,"line_start":10,"line_end":10,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":670,"byte_end":805,"line_start":28,"line_end":32,"column_start":1,"column_end":35,"is_primary":false,"text":[{"text":"instruction!(","highlight_start":1,"highlight_end":14},{"text":"    /// `EBREAK` instruction wrapper","highlight_start":1,"highlight_end":37},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Generates a breakpoint exception.","highlight_start":1,"highlight_end":42},{"text":"    , ebreak, \"ebreak\", __ebreak);","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"instruction!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":27,"byte_end":668,"line_start":3,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! instruction {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])*, $fnname:ident, $asm:expr, $asm_fn:ident) => (","highlight_start":1,"highlight_end":70},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub unsafe fn $fnname() {","highlight_start":1,"highlight_end":34},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn();","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs:10:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                () => asm!($asm :::: \"volatile\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0minstruction!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `EBREAK` instruction wrapper\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Generates a breakpoint exception.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    , ebreak, \"ebreak\", __ebreak);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":301,"byte_end":327,"line_start":10,"line_end":10,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":806,"byte_end":1112,"line_start":33,"line_end":38,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"instruction!(","highlight_start":1,"highlight_end":14},{"text":"    /// `WFI` instruction wrapper","highlight_start":1,"highlight_end":34},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Provides a hint to the implementation that the current hart can be stalled until an interrupt might need servicing.","highlight_start":1,"highlight_end":124},{"text":"    /// The WFI instruction is just a hint, and a legal implementation is to implement WFI as a NOP.","highlight_start":1,"highlight_end":101},{"text":"    , wfi, \"wfi\", __wfi);","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"instruction!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":27,"byte_end":668,"line_start":3,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! instruction {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])*, $fnname:ident, $asm:expr, $asm_fn:ident) => (","highlight_start":1,"highlight_end":70},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub unsafe fn $fnname() {","highlight_start":1,"highlight_end":34},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn();","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":301,"byte_end":305,"line_start":10,"line_end":10,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":806,"byte_end":1112,"line_start":33,"line_end":38,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"instruction!(","highlight_start":1,"highlight_end":14},{"text":"    /// `WFI` instruction wrapper","highlight_start":1,"highlight_end":34},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Provides a hint to the implementation that the current hart can be stalled until an interrupt might need servicing.","highlight_start":1,"highlight_end":124},{"text":"    /// The WFI instruction is just a hint, and a legal implementation is to implement WFI as a NOP.","highlight_start":1,"highlight_end":101},{"text":"    , wfi, \"wfi\", __wfi);","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"instruction!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":27,"byte_end":668,"line_start":3,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! instruction {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])*, $fnname:ident, $asm:expr, $asm_fn:ident) => (","highlight_start":1,"highlight_end":70},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub unsafe fn $fnname() {","highlight_start":1,"highlight_end":34},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn();","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs:10:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                () => asm!($asm :::: \"volatile\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0minstruction!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `WFI` instruction wrapper\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Provides a hint to the implementation that the current hart can be stalled until an interrupt might need servicing.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// The WFI instruction is just a hint, and a legal implementation is to implement WFI as a NOP.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    , wfi, \"wfi\", __wfi);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":301,"byte_end":327,"line_start":10,"line_end":10,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":1113,"byte_end":1800,"line_start":39,"line_end":47,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"instruction!(","highlight_start":1,"highlight_end":14},{"text":"    /// `SFENCE.VMA` instruction wrapper (all address spaces and page table levels)","highlight_start":1,"highlight_end":84},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Synchronizes updates to in-memory memory-management data structures with current execution.","highlight_start":1,"highlight_end":100},{"text":"    /// Instruction execution causes implicit reads and writes to these data structures; however, these implicit references","highlight_start":1,"highlight_end":124},{"text":"    /// are ordinarily not ordered with respect to loads and stores in the instruction stream.","highlight_start":1,"highlight_end":95},{"text":"    /// Executing an `SFENCE.VMA` instruction guarantees that any stores in the instruction stream prior to the","highlight_start":1,"highlight_end":112},{"text":"    /// `SFENCE.VMA` are ordered before all implicit references subsequent to the `SFENCE.VMA`.","highlight_start":1,"highlight_end":96},{"text":"    , sfence_vma_all, \"sfence.vma\", __sfence_vma_all);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"instruction!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":27,"byte_end":668,"line_start":3,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! instruction {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])*, $fnname:ident, $asm:expr, $asm_fn:ident) => (","highlight_start":1,"highlight_end":70},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub unsafe fn $fnname() {","highlight_start":1,"highlight_end":34},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn();","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":301,"byte_end":305,"line_start":10,"line_end":10,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":1113,"byte_end":1800,"line_start":39,"line_end":47,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"instruction!(","highlight_start":1,"highlight_end":14},{"text":"    /// `SFENCE.VMA` instruction wrapper (all address spaces and page table levels)","highlight_start":1,"highlight_end":84},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Synchronizes updates to in-memory memory-management data structures with current execution.","highlight_start":1,"highlight_end":100},{"text":"    /// Instruction execution causes implicit reads and writes to these data structures; however, these implicit references","highlight_start":1,"highlight_end":124},{"text":"    /// are ordinarily not ordered with respect to loads and stores in the instruction stream.","highlight_start":1,"highlight_end":95},{"text":"    /// Executing an `SFENCE.VMA` instruction guarantees that any stores in the instruction stream prior to the","highlight_start":1,"highlight_end":112},{"text":"    /// `SFENCE.VMA` are ordered before all implicit references subsequent to the `SFENCE.VMA`.","highlight_start":1,"highlight_end":96},{"text":"    , sfence_vma_all, \"sfence.vma\", __sfence_vma_all);","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"instruction!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":27,"byte_end":668,"line_start":3,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! instruction {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])*, $fnname:ident, $asm:expr, $asm_fn:ident) => (","highlight_start":1,"highlight_end":70},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub unsafe fn $fnname() {","highlight_start":1,"highlight_end":34},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!($asm :::: \"volatile\"),","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn();","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs:10:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                () => asm!($asm :::: \"volatile\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0minstruction!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `SFENCE.VMA` instruction wrapper (all address spaces and page table levels)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Synchronizes updates to in-memory memory-management data structures with current execution.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// `SFENCE.VMA` are ordered before all implicit references subsequent to the `SFENCE.VMA`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    , sfence_vma_all, \"sfence.vma\", __sfence_vma_all);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":2520,"byte_end":2583,"line_start":61,"line_end":61,"column_start":15,"column_end":78,"is_primary":true,"text":[{"text":"        () => asm!(\"sfence.vma $0, $1\" :: \"r\"(asid), \"r\"(addr) :: \"volatile\"),","highlight_start":15,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs","byte_start":2520,"byte_end":2524,"line_start":61,"line_end":61,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        () => asm!(\"sfence.vma $0, $1\" :: \"r\"(asid), \"r\"(addr) :: \"volatile\"),","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/asm.rs:61:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        () => asm!(\"sfence.vma $0, $1\" :: \"r\"(asid), \"r\"(addr) :: \"volatile\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs","byte_start":1948,"byte_end":1978,"line_start":102,"line_end":102,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"read_csr!(0x003, __read_fcsr);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs","byte_start":1948,"byte_end":1978,"line_start":102,"line_end":102,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"read_csr!(0x003, __read_fcsr);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs:102:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr!(0x003, __read_fcsr);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2724,"line_start":105,"line_end":105,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs","byte_start":1979,"byte_end":2011,"line_start":103,"line_end":103,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"write_csr!(0x003, __write_fcsr);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2659,"line_start":105,"line_end":105,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs","byte_start":1979,"byte_end":2011,"line_start":103,"line_end":103,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"write_csr!(0x003, __write_fcsr);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:105:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs:103:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwrite_csr!(0x003, __write_fcsr);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4408,"line_start":169,"line_end":169,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs","byte_start":2012,"byte_end":2040,"line_start":104,"line_end":104,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"clear!(0x003, __clear_fcsr);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4343,"line_start":169,"line_end":169,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs","byte_start":2012,"byte_end":2040,"line_start":104,"line_end":104,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"clear!(0x003, __clear_fcsr);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:169:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/fcsr.rs:104:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mclear!(0x003, __clear_fcsr);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mcause.rs","byte_start":3437,"byte_end":3480,"line_start":138,"line_end":138,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as!(Mcause, 0x342, __read_mcause);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mcause.rs","byte_start":3437,"byte_end":3480,"line_start":138,"line_end":138,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as!(Mcause, 0x342, __read_mcause);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mcause.rs:138:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Mcause, 0x342, __read_mcause);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mcycle.rs","byte_start":21,"byte_end":62,"line_start":3,"line_end":3,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0xB00, __read_mcycle);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mcycle.rs","byte_start":21,"byte_end":62,"line_start":3,"line_end":3,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0xB00, __read_mcycle);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mcycle.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0xB00, __read_mcycle);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mepc.rs","byte_start":19,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x341, __read_mepc);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mepc.rs","byte_start":19,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x341, __read_mepc);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mepc.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0x341, __read_mepc);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs","byte_start":1397,"byte_end":1434,"line_start":73,"line_end":73,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Mie, 0x304, __read_mie);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs","byte_start":1397,"byte_end":1434,"line_start":73,"line_end":73,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Mie, 0x304, __read_mie);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs:73:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Mie, 0x304, __read_mie);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3692,"line_start":143,"line_end":143,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs","byte_start":1435,"byte_end":1458,"line_start":74,"line_end":74,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"set!(0x304, __set_mie);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3627,"line_start":143,"line_end":143,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs","byte_start":1435,"byte_end":1458,"line_start":74,"line_end":74,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"set!(0x304, __set_mie);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:143:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs:74:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mset!(0x304, __set_mie);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4408,"line_start":169,"line_end":169,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs","byte_start":1459,"byte_end":1486,"line_start":75,"line_end":75,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"clear!(0x304, __clear_mie);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4343,"line_start":169,"line_end":169,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs","byte_start":1459,"byte_end":1486,"line_start":75,"line_end":75,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"clear!(0x304, __clear_mie);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:169:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mie.rs:75:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mclear!(0x304, __clear_mie);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/minstret.rs","byte_start":23,"byte_end":66,"line_start":3,"line_end":3,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0xB02, __read_minstret);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/minstret.rs","byte_start":23,"byte_end":66,"line_start":3,"line_end":3,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0xB02, __read_minstret);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/minstret.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0xB02, __read_minstret);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mip.rs","byte_start":1406,"byte_end":1443,"line_start":73,"line_end":73,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Mip, 0x344, __read_mip);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mip.rs","byte_start":1406,"byte_end":1443,"line_start":73,"line_end":73,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Mip, 0x344, __read_mip);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mip.rs:73:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Mip, 0x344, __read_mip);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/misa.rs","byte_start":1080,"byte_end":1110,"line_start":50,"line_end":50,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"read_csr!(0x301, __read_misa);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/misa.rs","byte_start":1080,"byte_end":1110,"line_start":50,"line_end":50,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"read_csr!(0x301, __read_misa);","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/misa.rs:50:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr!(0x301, __read_misa);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs","byte_start":2022,"byte_end":2067,"line_start":98,"line_end":98,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"read_csr_as!(Mstatus, 0x300, __read_mstatus);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs","byte_start":2022,"byte_end":2067,"line_start":98,"line_end":98,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"read_csr_as!(Mstatus, 0x300, __read_mstatus);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs:98:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Mstatus, 0x300, __read_mstatus);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3692,"line_start":143,"line_end":143,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs","byte_start":2068,"byte_end":2095,"line_start":99,"line_end":99,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"set!(0x300, __set_mstatus);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3627,"line_start":143,"line_end":143,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs","byte_start":2068,"byte_end":2095,"line_start":99,"line_end":99,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"set!(0x300, __set_mstatus);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:143:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs:99:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mset!(0x300, __set_mstatus);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4408,"line_start":169,"line_end":169,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs","byte_start":2096,"byte_end":2127,"line_start":100,"line_end":100,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"clear!(0x300, __clear_mstatus);","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4343,"line_start":169,"line_end":169,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs","byte_start":2096,"byte_end":2127,"line_start":100,"line_end":100,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"clear!(0x300, __clear_mstatus);","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:169:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mstatus.rs:100:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mclear!(0x300, __clear_mstatus);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mtvec.rs","byte_start":699,"byte_end":740,"line_start":37,"line_end":37,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"read_csr_as!(Mtvec, 0x305, __read_mtvec);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mtvec.rs","byte_start":699,"byte_end":740,"line_start":37,"line_end":37,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"read_csr_as!(Mtvec, 0x305, __read_mtvec);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mtvec.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Mtvec, 0x305, __read_mtvec);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2724,"line_start":105,"line_end":105,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mtvec.rs","byte_start":742,"byte_end":775,"line_start":39,"line_end":39,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"write_csr!(0x305, __write_mtvec);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2659,"line_start":105,"line_end":105,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mtvec.rs","byte_start":742,"byte_end":775,"line_start":39,"line_end":39,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"write_csr!(0x305, __write_mtvec);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:105:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mtvec.rs:39:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwrite_csr!(0x305, __write_mtvec);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mvendorid.rs","byte_start":420,"byte_end":455,"line_start":23,"line_end":23,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"read_csr!(0xF11, __read_mvendorid);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mvendorid.rs","byte_start":420,"byte_end":455,"line_start":23,"line_end":23,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"read_csr!(0xF11, __read_mvendorid);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/mvendorid.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr!(0xF11, __read_mvendorid);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/satp.rs","byte_start":1761,"byte_end":1800,"line_start":96,"line_end":96,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as!(Satp, 0x180, __read_satp);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/satp.rs","byte_start":1761,"byte_end":1800,"line_start":96,"line_end":96,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as!(Satp, 0x180, __read_satp);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/satp.rs:96:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Satp, 0x180, __read_satp);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2724,"line_start":105,"line_end":105,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/satp.rs","byte_start":1801,"byte_end":1833,"line_start":97,"line_end":97,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"write_csr!(0x180, __write_satp);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2659,"line_start":105,"line_end":105,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/satp.rs","byte_start":1801,"byte_end":1833,"line_start":97,"line_end":97,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"write_csr!(0x180, __write_satp);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:105:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/satp.rs:97:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwrite_csr!(0x180, __write_satp);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/scause.rs","byte_start":2596,"byte_end":2639,"line_start":117,"line_end":117,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as!(Scause, 0x142, __read_scause);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/scause.rs","byte_start":2596,"byte_end":2639,"line_start":117,"line_end":117,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as!(Scause, 0x142, __read_scause);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/scause.rs:117:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Scause, 0x142, __read_scause);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sepc.rs","byte_start":19,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x141, __read_sepc);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sepc.rs","byte_start":19,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x141, __read_sepc);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sepc.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0x141, __read_sepc);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2724,"line_start":105,"line_end":105,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3169,"byte_end":3202,"line_start":125,"line_end":125,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sepc.rs","byte_start":59,"byte_end":100,"line_start":4,"line_end":4,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"write_csr_as_usize!(0x141, __write_sepc);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3083,"byte_end":3339,"line_start":123,"line_end":133,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr_as_usize {","highlight_start":1,"highlight_end":34},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn write(bits: usize) {","highlight_start":1,"highlight_end":36},{"text":"            unsafe { _write(bits) }","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2659,"line_start":105,"line_end":105,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3169,"byte_end":3202,"line_start":125,"line_end":125,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sepc.rs","byte_start":59,"byte_end":100,"line_start":4,"line_end":4,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"write_csr_as_usize!(0x141, __write_sepc);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3083,"byte_end":3339,"line_start":123,"line_end":133,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr_as_usize {","highlight_start":1,"highlight_end":34},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn write(bits: usize) {","highlight_start":1,"highlight_end":36},{"text":"            unsafe { _write(bits) }","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:105:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sepc.rs:4:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwrite_csr_as_usize!(0x141, __write_sepc);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs","byte_start":1021,"byte_end":1058,"line_start":55,"line_end":55,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Sie, 0x104, __read_sie);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs","byte_start":1021,"byte_end":1058,"line_start":55,"line_end":55,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Sie, 0x104, __read_sie);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs:55:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Sie, 0x104, __read_sie);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3692,"line_start":143,"line_end":143,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs","byte_start":1059,"byte_end":1082,"line_start":56,"line_end":56,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"set!(0x104, __set_sie);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3627,"line_start":143,"line_end":143,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs","byte_start":1059,"byte_end":1082,"line_start":56,"line_end":56,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"set!(0x104, __set_sie);","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:143:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs:56:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mset!(0x104, __set_sie);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4408,"line_start":169,"line_end":169,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs","byte_start":1083,"byte_end":1110,"line_start":57,"line_end":57,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"clear!(0x104, __clear_sie);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4343,"line_start":169,"line_end":169,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs","byte_start":1083,"byte_end":1110,"line_start":57,"line_end":57,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"clear!(0x104, __clear_sie);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:169:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sie.rs:57:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mclear!(0x104, __clear_sie);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sip.rs","byte_start":1027,"byte_end":1064,"line_start":55,"line_end":55,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Sip, 0x144, __read_sip);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sip.rs","byte_start":1027,"byte_end":1064,"line_start":55,"line_end":55,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"read_csr_as!(Sip, 0x144, __read_sip);","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sip.rs:55:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Sip, 0x144, __read_sip);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sscratch.rs","byte_start":23,"byte_end":66,"line_start":3,"line_end":3,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x140, __read_sscratch);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sscratch.rs","byte_start":23,"byte_end":66,"line_start":3,"line_end":3,"column_start":1,"column_end":44,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x140, __read_sscratch);","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sscratch.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0x140, __read_sscratch);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2724,"line_start":105,"line_end":105,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3169,"byte_end":3202,"line_start":125,"line_end":125,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sscratch.rs","byte_start":67,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"write_csr_as_usize!(0x140, __write_sscratch);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3083,"byte_end":3339,"line_start":123,"line_end":133,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr_as_usize {","highlight_start":1,"highlight_end":34},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn write(bits: usize) {","highlight_start":1,"highlight_end":36},{"text":"            unsafe { _write(bits) }","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2659,"line_start":105,"line_end":105,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3169,"byte_end":3202,"line_start":125,"line_end":125,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sscratch.rs","byte_start":67,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"write_csr_as_usize!(0x140, __write_sscratch);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3083,"byte_end":3339,"line_start":123,"line_end":133,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr_as_usize {","highlight_start":1,"highlight_end":34},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        write_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn write(bits: usize) {","highlight_start":1,"highlight_end":36},{"text":"            unsafe { _write(bits) }","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:105:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sscratch.rs:4:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwrite_csr_as_usize!(0x140, __write_sscratch);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs","byte_start":2519,"byte_end":2564,"line_start":122,"line_end":122,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"read_csr_as!(Sstatus, 0x100, __read_sstatus);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs","byte_start":2519,"byte_end":2564,"line_start":122,"line_end":122,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"read_csr_as!(Sstatus, 0x100, __read_sstatus);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs:122:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Sstatus, 0x100, __read_sstatus);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3692,"line_start":143,"line_end":143,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs","byte_start":2565,"byte_end":2592,"line_start":123,"line_end":123,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"set!(0x100, __set_sstatus);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3623,"byte_end":3627,"line_start":143,"line_end":143,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs","byte_start":2565,"byte_end":2592,"line_start":123,"line_end":123,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"set!(0x100, __set_sstatus);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":3341,"byte_end":4049,"line_start":135,"line_end":159,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! set {","highlight_start":1,"highlight_end":19},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Set the CSR","highlight_start":1,"highlight_end":24},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _set(bits: usize) {","highlight_start":1,"highlight_end":38},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:143:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrs x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs:123:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mset!(0x100, __set_sstatus);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4408,"line_start":169,"line_end":169,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs","byte_start":2593,"byte_end":2624,"line_start":124,"line_end":124,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"clear!(0x100, __clear_sstatus);","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4339,"byte_end":4343,"line_start":169,"line_end":169,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs","byte_start":2593,"byte_end":2624,"line_start":124,"line_end":124,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"clear!(0x100, __clear_sstatus);","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"clear!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":4051,"byte_end":4765,"line_start":161,"line_end":185,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! clear {","highlight_start":1,"highlight_end":21},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Clear the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _clear(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:169:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrc x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/sstatus.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mclear!(0x100, __clear_sstatus);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stval.rs","byte_start":20,"byte_end":60,"line_start":3,"line_end":3,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x143, __read_stval);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stval.rs","byte_start":20,"byte_end":60,"line_start":3,"line_end":3,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0x143, __read_stval);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stval.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0x143, __read_stval);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stvec.rs","byte_start":699,"byte_end":740,"line_start":37,"line_end":37,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"read_csr_as!(Stvec, 0x105, __read_stvec);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1643,"byte_end":1675,"line_start":61,"line_end":61,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stvec.rs","byte_start":699,"byte_end":740,"line_start":37,"line_end":37,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"read_csr_as!(Stvec, 0x105, __read_stvec);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1547,"byte_end":1856,"line_start":59,"line_end":71,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as {","highlight_start":1,"highlight_end":27},{"text":"    ($register:ident, $csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":61},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> $register {","highlight_start":1,"highlight_end":37},{"text":"            $register {","highlight_start":1,"highlight_end":24},{"text":"                bits: unsafe { _read() },","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stvec.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as!(Stvec, 0x105, __read_stvec);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2724,"line_start":105,"line_end":105,"column_start":23,"column_end":92,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stvec.rs","byte_start":741,"byte_end":774,"line_start":38,"line_end":38,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"write_csr!(0x105, __write_stvec);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2655,"byte_end":2659,"line_start":105,"line_end":105,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stvec.rs","byte_start":741,"byte_end":774,"line_start":38,"line_end":38,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"write_csr!(0x105, __write_stvec);","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":2362,"byte_end":3081,"line_start":97,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! write_csr {","highlight_start":1,"highlight_end":25},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Writes the CSR","highlight_start":1,"highlight_end":27},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        #[allow(unused_variables)]","highlight_start":1,"highlight_end":35},{"text":"        unsafe fn _write(bits: usize) {","highlight_start":1,"highlight_end":40},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn(bits: usize);","highlight_start":1,"highlight_end":49},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn(bits);","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:105:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                () => asm!(\"csrrw x0, $1, $0\" :: \"r\"(bits), \"i\"($csr_number) :: \"volatile\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/stvec.rs:38:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwrite_csr!(0x105, __write_stvec);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the legacy LLVM-style asm! syntax is no longer supported","code":null,"level":"error","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":377,"line_start":10,"line_end":10,"column_start":21,"column_end":89,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/time.rs","byte_start":19,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0xC01, __read_time);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider migrating to the new asm! syntax specified in RFC 2873","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"alternatively, switch to llvm_asm! to keep your code working as it is","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":309,"byte_end":313,"line_start":10,"line_end":10,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"llvm_asm!","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1943,"byte_end":1975,"line_start":75,"line_end":75,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/time.rs","byte_start":19,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"read_csr_as_usize!(0xC01, __read_time);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_csr_as_usize!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":1858,"byte_end":2103,"line_start":73,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr_as_usize {","highlight_start":1,"highlight_end":33},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        read_csr!($csr_number, $asm_fn);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        pub fn read() -> usize {","highlight_start":1,"highlight_end":33},{"text":"            unsafe { _read() }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"read_csr!","def_site_span":{"file_name":"/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs","byte_start":0,"byte_end":766,"line_start":1,"line_end":28,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! read_csr {","highlight_start":1,"highlight_end":24},{"text":"    ($csr_number:expr, $asm_fn: ident) => {","highlight_start":1,"highlight_end":44},{"text":"        /// Reads the CSR","highlight_start":1,"highlight_end":26},{"text":"        #[inline]","highlight_start":1,"highlight_end":18},{"text":"        unsafe fn _read() -> usize {","highlight_start":1,"highlight_end":37},{"text":"            match () {","highlight_start":1,"highlight_end":23},{"text":"                #[cfg(all(riscv, feature = \"inline-asm\"))]","highlight_start":1,"highlight_end":59},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    let r: usize;","highlight_start":1,"highlight_end":34},{"text":"                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");","highlight_start":1,"highlight_end":89},{"text":"                    r","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(all(riscv, not(feature = \"inline-asm\")))]","highlight_start":1,"highlight_end":64},{"text":"                () => {","highlight_start":1,"highlight_end":24},{"text":"                    extern \"C\" {","highlight_start":1,"highlight_end":33},{"text":"                        fn $asm_fn() -> usize;","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    $asm_fn()","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[cfg(not(riscv))]","highlight_start":1,"highlight_end":35},{"text":"                () => unimplemented!(),","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the legacy LLVM-style asm! syntax is no longer supported\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/macros.rs:10:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    asm!(\"csrrs $0, $1, x0\" : \"=r\"(r) : \"i\"($csr_number) :: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: replace with: `llvm_asm!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hustccc/.cargo/git/checkouts/riscv-ab2abd16c438337b/c62af46/src/register/time.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mread_csr_as_usize!(0xC01, __read_time);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider migrating to the new asm! syntax specified in RFC 2873\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: alternatively, switch to llvm_asm! to keep your code working as it is\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 40 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 40 previous errors\u001b[0m\n\n"}
