{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7","program":"/home/hustccc/.rustup/toolchains/nightly-2020-06-27-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","region_alloc","--edition=2018","/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","panic=abort","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=b0f35d877aab7c8f","-C","extra-filename=-b0f35d877aab7c8f","--out-dir","/home/hustccc/zCore-riscv/os/target/rls/riscv64imac-unknown-none-elf/debug/deps","--target","riscv64imac-unknown-none-elf","-L","dependency=/home/hustccc/zCore-riscv/os/target/rls/riscv64imac-unknown-none-elf/debug/deps","-L","dependency=/home/hustccc/zCore-riscv/os/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/hustccc/.rustup/toolchains/nightly-2020-06-27-x86_64-unknown-linux-gnu"],"output":"/home/hustccc/zCore-riscv/os/target/rls/riscv64imac-unknown-none-elf/debug/deps/libregion_alloc-b0f35d877aab7c8f.rmeta"},"prelude":{"crate_id":{"name":"region_alloc","disambiguator":[10605754908419230478,4018783523030920757]},"crate_root":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src","external_crates":[{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11664419765657533531,8460344961036156071]}},{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[692475293806162283,16637895737923782504]}},{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6641927447179849527,4609170559316725173]}},{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4693264404719495008,542386644207542885]}}],"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":0,"byte_end":8760,"line_start":1,"line_end":261,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":0,"byte_end":8760,"line_start":1,"line_end":261,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":26},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":49},{"krate":0,"index":47},{"krate":0,"index":45},{"krate":0,"index":43},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":29},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":10}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"feature(btree_drain_filter)","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":11,"byte_end":42,"line_start":2,"line_end":2,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":341,"byte_end":356,"line_start":18,"line_end":18,"column_start":12,"column_end":27},"name":"RegionAllocator","qualname":"::RegionAllocator","value":"RegionAllocator {  }","parent":null,"children":[{"krate":0,"index":54}],"decl_id":null,"docs":" An endpoint-based region allocator.\n","sig":null,"attributes":[{"value":"/ An endpoint-based region allocator.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":271,"byte_end":310,"line_start":16,"line_end":16,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":472,"byte_end":475,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<RegionAllocator>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty [`RegionAllocator`].\n","sig":null,"attributes":[{"value":"/ Create an empty [`RegionAllocator`].","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":420,"byte_end":460,"line_start":23,"line_end":23,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":937,"byte_end":940,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"add","qualname":"<RegionAllocator>::add","value":"pub fn add(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Add a region `[base, base + size)` to the set.\n The left endpoint is inclusive, and the right endpoint is exclusive.","sig":null,"attributes":[{"value":"/ Add a region `[base, base + size)` to the set.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":533,"byte_end":583,"line_start":27,"line_end":27,"column_start":5,"column_end":55}},{"value":"/ The left endpoint is inclusive, and the right endpoint is exclusive.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":588,"byte_end":660,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":665,"byte_end":668,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Any two overlapped or adjacent regions will be merged.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":673,"byte_end":731,"line_start":30,"line_end":30,"column_start":5,"column_end":63}},{"value":"/ In the final region set, no regions are intersected.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":736,"byte_end":792,"line_start":31,"line_end":31,"column_start":5,"column_end":61}},{"value":"/ For example if both `[0, 10)` and `[10, 20)` are added sequentially,","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":797,"byte_end":869,"line_start":32,"line_end":32,"column_start":5,"column_end":77}},{"value":"/ only `[0, 20)` will be in the final region set.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":874,"byte_end":925,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":1625,"byte_end":1633,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"subtract","qualname":"<RegionAllocator>::subtract","value":"pub fn subtract(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Subtract the whole region set with a given region.\n After this operation, all regions in the set have no intersection with the given one.\n Regions completely contained by the given region will be removed.\n Regions wholly containing the given region will be splitted into two parts\n","sig":null,"attributes":[{"value":"/ Subtract the whole region set with a given region.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":1308,"byte_end":1362,"line_start":44,"line_end":44,"column_start":5,"column_end":59}},{"value":"/ After this operation, all regions in the set have no intersection with the given one.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":1367,"byte_end":1456,"line_start":45,"line_end":45,"column_start":5,"column_end":94}},{"value":"/ Regions completely contained by the given region will be removed.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":1461,"byte_end":1530,"line_start":46,"line_end":46,"column_start":5,"column_end":74}},{"value":"/ Regions wholly containing the given region will be splitted into two parts","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":1535,"byte_end":1613,"line_start":47,"line_end":47,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":2091,"byte_end":2106,"line_start":62,"line_end":62,"column_start":12,"column_end":27},"name":"add_or_subtract","qualname":"<RegionAllocator>::add_or_subtract","value":"pub fn add_or_subtract(&mut Self, usize, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":2298,"byte_end":2314,"line_start":70,"line_end":70,"column_start":12,"column_end":28},"name":"allocate_by_addr","qualname":"<RegionAllocator>::allocate_by_addr","value":"pub fn allocate_by_addr(&mut Self, usize, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":2670,"byte_end":2686,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"allocate_by_size","qualname":"<RegionAllocator>::allocate_by_size","value":"pub fn allocate_by_size(&mut Self, usize, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Allocate a region at an arbitrary position aligned to a given power of 2.\n","sig":null,"attributes":[{"value":"/ Allocate a region at an arbitrary position aligned to a given power of 2.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":2581,"byte_end":2658,"line_start":79,"line_end":79,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3287,"byte_end":3299,"line_start":98,"line_end":98,"column_start":12,"column_end":24},"name":"check_region","qualname":"<RegionAllocator>::check_region","value":"pub fn check_region(&Self, usize, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Find if any region perfectly match a given range.\n","sig":null,"attributes":[{"value":"/ Find if any region perfectly match a given range.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3222,"byte_end":3275,"line_start":97,"line_end":97,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3459,"byte_end":3462,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"len","qualname":"<RegionAllocator>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return number of regions in the set.\n","sig":null,"attributes":[{"value":"/ Return number of regions in the set.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3407,"byte_end":3447,"line_start":101,"line_end":101,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3525,"byte_end":3533,"line_start":105,"line_end":105,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RegionAllocator>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3644,"byte_end":3655,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"check_point","qualname":"<RegionAllocator>::check_point","value":"pub fn check_point(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether the point is covered.\n","sig":null,"attributes":[{"value":"/ Check whether the point is covered.","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":3593,"byte_end":3632,"line_start":108,"line_end":108,"column_start":5,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":398,"byte_end":413,"line_start":22,"line_end":22,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hustccc/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs","byte_start":398,"byte_end":413,"line_start":22,"line_end":22,"column_start":6,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}}]}